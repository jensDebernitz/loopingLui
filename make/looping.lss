
looping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b36  00000bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800104  00800104  00000bce  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001333  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000218  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b33  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b4a  00000000  00000000  000030ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001345  00000000  00000000  00003bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000438  00000000  00000000  00004f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000be2  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cab  00000000  00000000  00005f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  00006c01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1d c3       	rjmp	.+1594   	; 0x67c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a4 e0       	ldi	r26, 0x04	; 4
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 3c       	cpi	r26, 0xC7	; 199
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e6 e3       	ldi	r30, 0x36	; 54
  b0:	fb e0       	ldi	r31, 0x0B	; 11
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>
  c2:	5e d0       	rcall	.+188    	; 0x180 <main>
  c4:	36 c5       	rjmp	.+2668   	; 0xb32 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <callBackSwitch2ThreeSec>:
}

void callBackSwitch2ThreeSec(void)
{
   static uint8_t toggleBit = 0;
   toggleBit ^= 1;
  c8:	60 91 07 01 	lds	r22, 0x0107
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	68 27       	eor	r22, r24
  d0:	60 93 07 01 	sts	0x0107, r22
   setLEDBlinking(Led_Blue_5, toggleBit, 0x10);
  d4:	20 e1       	ldi	r18, 0x10	; 16
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	5d c1       	rjmp	.+698    	; 0x39c <setLEDBlinking>

000000e2 <callBackSwitch1ThreeSec>:
}

void callBackSwitch1ThreeSec(void)
{
   static uint8_t toggleBit = 0;
   toggleBit ^= 1;
  e2:	60 91 05 01 	lds	r22, 0x0105
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	68 27       	eor	r22, r24
  ea:	60 93 05 01 	sts	0x0105, r22
   setLEDBlinking(Led_Blue_3, toggleBit, 0x10);
  ee:	20 e1       	ldi	r18, 0x10	; 16
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	50 c1       	rjmp	.+672    	; 0x39c <setLEDBlinking>

000000fc <callBackSwitch2OneSec>:
}

void callBackSwitch2OneSec(void)
{
   static uint8_t toggleBit = 0;
   toggleBit ^= 1;
  fc:	60 91 06 01 	lds	r22, 0x0106
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	68 27       	eor	r22, r24
 104:	60 93 06 01 	sts	0x0106, r22
   setLEDBlinking(Led_Blue_4, toggleBit, 0x10);
 108:	20 e1       	ldi	r18, 0x10	; 16
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	43 d1       	rcall	.+646    	; 0x39c <setLEDBlinking>
   setStartGame(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	8a c1       	rjmp	.+788    	; 0x42e <setStartGame>

0000011a <callBackSwitch1OneSec>:
}

void callBackSwitch1OneSec(void)
{
   static uint8_t toggleBit = 0;
   toggleBit ^= 1;
 11a:	60 91 04 01 	lds	r22, 0x0104
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	68 27       	eor	r22, r24
 122:	60 93 04 01 	sts	0x0104, r22
   setLEDBlinking(Led_Blue_2, toggleBit, 0x10);
 126:	20 e1       	ldi	r18, 0x10	; 16
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	34 d1       	rcall	.+616    	; 0x39c <setLEDBlinking>
   setStartGame(1);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	7b c1       	rjmp	.+758    	; 0x42e <setStartGame>

00000138 <initDevices>:
 SUBROUTINES
 *********************************************************************************/

void initDevices(void)
{
   initPorts();
 138:	7d d1       	rcall	.+762    	; 0x434 <initPorts>
   initTimer();
 13a:	43 d3       	rcall	.+1670   	; 0x7c2 <initTimer>
   initEngine();
 13c:	89 d3       	rcall	.+1810   	; 0x850 <initEngine>
   initGameModeModul();
 13e:	3f d1       	rcall	.+638    	; 0x3be <initGameModeModul>

   initSegmentDisplay();
 140:	25 d0       	rcall	.+74     	; 0x18c <initSegmentDisplay>
   initDrinkModul();
 142:	0d d4       	rcall	.+2074   	; 0x95e <initDrinkModul>

   setFunctionPointerSwitch(Pressed_Switch_1_One_Seconds, callBackSwitch1OneSec);
 144:	6d e8       	ldi	r22, 0x8D	; 141
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	86 d2       	rcall	.+1292   	; 0x65a <setFunctionPointerSwitch>
   setFunctionPointerSwitch(Pressed_Switch_1_Three_Seconds, callBackSwitch1ThreeSec);
 14e:	61 e7       	ldi	r22, 0x71	; 113
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	81 d2       	rcall	.+1282   	; 0x65a <setFunctionPointerSwitch>
   setFunctionPointerSwitch(Pressed_Switch_2_One_Seconds, callBackSwitch2OneSec);
 158:	6e e7       	ldi	r22, 0x7E	; 126
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	7c d2       	rcall	.+1272   	; 0x65a <setFunctionPointerSwitch>
   setFunctionPointerSwitch(Pressed_Switch_2_Three_Seconds, callBackSwitch2ThreeSec);
 162:	64 e6       	ldi	r22, 0x64	; 100
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	77 d2       	rcall	.+1262   	; 0x65a <setFunctionPointerSwitch>

   MCUCR = 0x00;
 16c:	15 be       	out	0x35, r1	; 53
   EICRA = 0x00; //extended ext ints
 16e:	10 92 6a 00 	sts	0x006A, r1
   EICRB = 0x00; //extended ext ints
 172:	1a be       	out	0x3a, r1	; 58
   EIMSK = 0x00;
 174:	19 be       	out	0x39, r1	; 57
   ETIMSK = 0x00; //extended timer interrupt sources
 176:	10 92 7d 00 	sts	0x007D, r1
   enableTimer0Interrupt();
 17a:	f5 d2       	rcall	.+1514   	; 0x766 <enableTimer0Interrupt>
   sei();
 17c:	78 94       	sei
 17e:	08 95       	ret

00000180 <main>:
 MAIN ROUTINE
 *********************************************************************************/

int main(void)
{
   initDevices();
 180:	db df       	rcall	.-74     	; 0x138 <initDevices>

   setSpeed(1023);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	34 d3       	rcall	.+1640   	; 0x7f0 <setSpeed>
//      else
//      {
//         setSegementDisplay(3, 1);
//         PORTB |= (1 << PIEZO);
//      }
      runGame();
 188:	20 d1       	rcall	.+576    	; 0x3ca <runGame>
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x8>

0000018c <initSegmentDisplay>:
/*
 * private functions
 */
void clearScreen(void)
{
   PORTA = 0x00;
 18c:	1b ba       	out	0x1b, r1	; 27
 18e:	ed e2       	ldi	r30, 0x2D	; 45
 190:	f1 e0       	ldi	r31, 0x01	; 1
   clearScreen();

   //init the blinking Struct
   for (int i = 0; i < Led_Display_Max_Counter; ++i)
   {
      blinkingInformations[i].blinkingFrequency = 0;
 192:	11 82       	std	Z+1, r1	; 0x01
 194:	12 82       	std	Z+2, r1	; 0x02
 196:	13 82       	std	Z+3, r1	; 0x03
 198:	14 82       	std	Z+4, r1	; 0x04
      blinkingInformations[i].isBlinking = 0;
 19a:	10 82       	st	Z, r1
      blinkingInformations[i].blinkingCounter = 0;
 19c:	15 82       	std	Z+5, r1	; 0x05
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	17 82       	std	Z+7, r1	; 0x07
 1a2:	10 86       	std	Z+8, r1	; 0x08
 1a4:	39 96       	adiw	r30, 0x09	; 9
void initSegmentDisplay(void)
{
   clearScreen();

   //init the blinking Struct
   for (int i = 0; i < Led_Display_Max_Counter; ++i)
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	ed 3b       	cpi	r30, 0xBD	; 189
 1aa:	f8 07       	cpc	r31, r24
 1ac:	91 f7       	brne	.-28     	; 0x192 <initSegmentDisplay+0x6>
      blinkingInformations[i].blinkingFrequency = 0;
      blinkingInformations[i].isBlinking = 0;
      blinkingInformations[i].blinkingCounter = 0;
   }

   setFunctionPointerTimer0(blinkingHandler);
 1ae:	85 e9       	ldi	r24, 0x95	; 149
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	09 c3       	rjmp	.+1554   	; 0x7c6 <setFunctionPointerTimer0>

000001b4 <setSegementDisplay>:
/*
 * private functions
 */
void clearScreen(void)
{
   PORTA = 0x00;
 1b4:	1b ba       	out	0x1b, r1	; 27
{
   clearScreen();

   segmentDisplayDot dotPoint = No_Dot;

   switch (figure)
 1b6:	87 30       	cpi	r24, 0x07	; 7
 1b8:	91 05       	cpc	r25, r1
 1ba:	81 f1       	breq	.+96     	; 0x21c <setSegementDisplay+0x68>
 1bc:	70 f4       	brcc	.+28     	; 0x1da <setSegementDisplay+0x26>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	91 05       	cpc	r25, r1
 1c2:	21 f1       	breq	.+72     	; 0x20c <setSegementDisplay+0x58>
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <setSegementDisplay+0x1c>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	91 05       	cpc	r25, r1
 1ca:	e1 f0       	breq	.+56     	; 0x204 <setSegementDisplay+0x50>
 1cc:	e8 f4       	brcc	.+58     	; 0x208 <setSegementDisplay+0x54>
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <setSegementDisplay+0x4c>
 1d0:	85 30       	cpi	r24, 0x05	; 5
 1d2:	91 05       	cpc	r25, r1
 1d4:	f9 f0       	breq	.+62     	; 0x214 <setSegementDisplay+0x60>
 1d6:	00 f5       	brcc	.+64     	; 0x218 <setSegementDisplay+0x64>
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <setSegementDisplay+0x5c>
 1da:	8b 30       	cpi	r24, 0x0B	; 11
 1dc:	91 05       	cpc	r25, r1
 1de:	39 f1       	breq	.+78     	; 0x22e <setSegementDisplay+0x7a>
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <setSegementDisplay+0x38>
 1e2:	89 30       	cpi	r24, 0x09	; 9
 1e4:	91 05       	cpc	r25, r1
 1e6:	f1 f0       	breq	.+60     	; 0x224 <setSegementDisplay+0x70>
 1e8:	00 f5       	brcc	.+64     	; 0x22a <setSegementDisplay+0x76>
 1ea:	1a c0       	rjmp	.+52     	; 0x220 <setSegementDisplay+0x6c>
 1ec:	8d 30       	cpi	r24, 0x0D	; 13
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f1       	breq	.+68     	; 0x236 <setSegementDisplay+0x82>
 1f2:	f8 f0       	brcs	.+62     	; 0x232 <setSegementDisplay+0x7e>
 1f4:	8e 30       	cpi	r24, 0x0E	; 14
 1f6:	91 05       	cpc	r25, r1
 1f8:	01 f1       	breq	.+64     	; 0x23a <setSegementDisplay+0x86>
 1fa:	0f 97       	sbiw	r24, 0x0f	; 15
 1fc:	11 f5       	brne	.+68     	; 0x242 <setSegementDisplay+0x8e>
 1fe:	1f c0       	rjmp	.+62     	; 0x23e <setSegementDisplay+0x8a>
   {
   case Figure_Zero:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_F);
 200:	8c ef       	ldi	r24, 0xFC	; 252
 202:	1e c0       	rjmp	.+60     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_One:
      PORTA = (LED_SEGMENT_B | LED_SEGMENT_C);
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	1c c0       	rjmp	.+56     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Two:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_G);
 208:	8a ed       	ldi	r24, 0xDA	; 218
 20a:	1a c0       	rjmp	.+52     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Three:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_G);
 20c:	82 ef       	ldi	r24, 0xF2	; 242
 20e:	18 c0       	rjmp	.+48     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Four:
      PORTA = (LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_F | LED_SEGMENT_G);
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	16 c0       	rjmp	.+44     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Five:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_F | LED_SEGMENT_G);
 214:	86 eb       	ldi	r24, 0xB6	; 182
 216:	14 c0       	rjmp	.+40     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Six:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_F
 218:	8e eb       	ldi	r24, 0xBE	; 190
 21a:	05 c0       	rjmp	.+10     	; 0x226 <setSegementDisplay+0x72>
               | LED_SEGMENT_G);
      dotPoint = Dot;
      break;
   case Figure_Seven:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C);
 21c:	80 ee       	ldi	r24, 0xE0	; 224
 21e:	10 c0       	rjmp	.+32     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_Eight:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_E
 220:	8e ef       	ldi	r24, 0xFE	; 254
 222:	0e c0       	rjmp	.+28     	; 0x240 <setSegementDisplay+0x8c>
               | LED_SEGMENT_F | LED_SEGMENT_G);
      break;
   case Figure_Nine:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_F
 224:	86 ef       	ldi	r24, 0xF6	; 246
 226:	8b bb       	out	0x1b, r24	; 27
               | LED_SEGMENT_G);
      dotPoint = Dot;
      break;
 228:	0e c0       	rjmp	.+28     	; 0x246 <setSegementDisplay+0x92>
   case Figure_A:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_E | LED_SEGMENT_F
 22a:	8e ee       	ldi	r24, 0xEE	; 238
 22c:	09 c0       	rjmp	.+18     	; 0x240 <setSegementDisplay+0x8c>
               | LED_SEGMENT_G);
      break;
   case Figure_B:
      PORTA = (LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_F | LED_SEGMENT_G);
 22e:	8e e3       	ldi	r24, 0x3E	; 62
 230:	07 c0       	rjmp	.+14     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_C:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_F);
 232:	8c e9       	ldi	r24, 0x9C	; 156
 234:	05 c0       	rjmp	.+10     	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_D:
      PORTA = (LED_SEGMENT_B | LED_SEGMENT_C | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_G);
 236:	8a e7       	ldi	r24, 0x7A	; 122
 238:	03 c0       	rjmp	.+6      	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_E:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_D | LED_SEGMENT_E | LED_SEGMENT_F | LED_SEGMENT_G);
 23a:	8e e9       	ldi	r24, 0x9E	; 158
 23c:	01 c0       	rjmp	.+2      	; 0x240 <setSegementDisplay+0x8c>
      break;
   case Figure_F:
      PORTA = (LED_SEGMENT_A | LED_SEGMENT_E | LED_SEGMENT_F | LED_SEGMENT_G);
 23e:	8e e8       	ldi	r24, 0x8E	; 142
 240:	8b bb       	out	0x1b, r24	; 27
   {
      PORTA |= LED_SEGMENT_DOT;
   }
   else
   {
      PORTA &= ~LED_SEGMENT_DOT;
 242:	d8 98       	cbi	0x1b, 0	; 27
 244:	08 95       	ret
      break;
   }

   if (dotPoint == Dot)
   {
      PORTA |= LED_SEGMENT_DOT;
 246:	d8 9a       	sbi	0x1b, 0	; 27
 248:	08 95       	ret

0000024a <setLED>:
            ledStatus status)
{
   uint8_t *port;
   uint8_t operand;

   switch (displayed)
 24a:	87 30       	cpi	r24, 0x07	; 7
 24c:	91 05       	cpc	r25, r1
 24e:	79 f1       	breq	.+94     	; 0x2ae <setLED+0x64>
 250:	70 f4       	brcc	.+28     	; 0x26e <setLED+0x24>
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	91 05       	cpc	r25, r1
 256:	19 f1       	breq	.+70     	; 0x29e <setLED+0x54>
 258:	28 f4       	brcc	.+10     	; 0x264 <setLED+0x1a>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	d9 f1       	breq	.+118    	; 0x2d6 <setLED+0x8c>
 260:	e0 f4       	brcc	.+56     	; 0x29a <setLED+0x50>
 262:	19 c0       	rjmp	.+50     	; 0x296 <setLED+0x4c>
 264:	85 30       	cpi	r24, 0x05	; 5
 266:	91 05       	cpc	r25, r1
 268:	f1 f0       	breq	.+60     	; 0x2a6 <setLED+0x5c>
 26a:	f8 f4       	brcc	.+62     	; 0x2aa <setLED+0x60>
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <setLED+0x58>
 26e:	8b 30       	cpi	r24, 0x0B	; 11
 270:	91 05       	cpc	r25, r1
 272:	29 f1       	breq	.+74     	; 0x2be <setLED+0x74>
 274:	28 f4       	brcc	.+10     	; 0x280 <setLED+0x36>
 276:	89 30       	cpi	r24, 0x09	; 9
 278:	91 05       	cpc	r25, r1
 27a:	e9 f0       	breq	.+58     	; 0x2b6 <setLED+0x6c>
 27c:	f0 f4       	brcc	.+60     	; 0x2ba <setLED+0x70>
 27e:	19 c0       	rjmp	.+50     	; 0x2b2 <setLED+0x68>
 280:	8d 30       	cpi	r24, 0x0D	; 13
 282:	91 05       	cpc	r25, r1
 284:	11 f1       	breq	.+68     	; 0x2ca <setLED+0x80>
 286:	e8 f0       	brcs	.+58     	; 0x2c2 <setLED+0x78>
 288:	8e 30       	cpi	r24, 0x0E	; 14
 28a:	91 05       	cpc	r25, r1
 28c:	01 f1       	breq	.+64     	; 0x2ce <setLED+0x84>
 28e:	0f 97       	sbiw	r24, 0x0f	; 15
 290:	09 f0       	breq	.+2      	; 0x294 <setLED+0x4a>
 292:	4a c0       	rjmp	.+148    	; 0x328 <setLED+0xde>
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <setLED+0x88>
   {
   case Led_Red_1:
      port = (uint8_t*) &PORTC;
      operand = RED_1;
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	1f c0       	rjmp	.+62     	; 0x2d8 <setLED+0x8e>
      port = (uint8_t*) &PORTC;
      operand = RED_2;
      break;
   case Led_Red_3:
      port = (uint8_t*) &PORTC;
      operand = RED_3;
 29a:	25 e0       	ldi	r18, 0x05	; 5
 29c:	1d c0       	rjmp	.+58     	; 0x2d8 <setLED+0x8e>
      break;
   case Led_Red_4:
      port = (uint8_t*) &PORTC;
      operand = RED_4;
 29e:	26 e0       	ldi	r18, 0x06	; 6
 2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <setLED+0x8e>
      break;
   case Led_Red_5:
      port = (uint8_t*) &PORTC;
      operand = RED_5;
 2a2:	27 e0       	ldi	r18, 0x07	; 7
 2a4:	19 c0       	rjmp	.+50     	; 0x2d8 <setLED+0x8e>
      break;
   case Led_Blue_1:
      port = (uint8_t*) &PORTD;
      operand = BLUE_1;
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Blue_2:
      port = (uint8_t*) &PORTD;
      operand = BLUE_2;
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Blue_3:
      port = (uint8_t*) &PORTD;
      operand = BLUE_3;
 2ae:	22 e0       	ldi	r18, 0x02	; 2
 2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Yellow_1:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_1;
 2b2:	23 e0       	ldi	r18, 0x03	; 3
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Yellow_2:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_2;
 2b6:	24 e0       	ldi	r18, 0x04	; 4
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Yellow_3:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_3;
 2ba:	25 e0       	ldi	r18, 0x05	; 5
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Yellow_4:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_4;
 2be:	26 e0       	ldi	r18, 0x06	; 6
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <setLED+0x7a>
      break;
   case Led_Yellow_5:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_5;
 2c2:	27 e0       	ldi	r18, 0x07	; 7
   case Led_Yellow_4:
      port = (uint8_t*) &PORTD;
      operand = YELLOW_4;
      break;
   case Led_Yellow_5:
      port = (uint8_t*) &PORTD;
 2c4:	e2 e3       	ldi	r30, 0x32	; 50
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
      operand = YELLOW_5;
      break;
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <setLED+0x92>
   case Led_Blue_4:
      port = (uint8_t*) &PORTC;
      operand = BLUE_4;
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <setLED+0x8e>
      break;
   case Led_Blue_5:
      port = (uint8_t*) &PORTC;
      operand = BLUE_5;
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <setLED+0x8e>
      break;
   case Led_Blue_6:
      port = (uint8_t*) &PORTC;
      operand = BLUE_6;
 2d2:	22 e0       	ldi	r18, 0x02	; 2
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <setLED+0x8e>
      port = (uint8_t*) &PORTC;
      operand = RED_1;
      break;
   case Led_Red_2:
      port = (uint8_t*) &PORTC;
      operand = RED_2;
 2d6:	24 e0       	ldi	r18, 0x04	; 4
   case Led_Red_1:
      port = (uint8_t*) &PORTC;
      operand = RED_1;
      break;
   case Led_Red_2:
      port = (uint8_t*) &PORTC;
 2d8:	e5 e3       	ldi	r30, 0x35	; 53
 2da:	f0 e0       	ldi	r31, 0x00	; 0
      break;
   default:
      return;
   }

   switch (status)
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	71 05       	cpc	r23, r1
 2e0:	29 f0       	breq	.+10     	; 0x2ec <setLED+0xa2>
 2e2:	68 f0       	brcs	.+26     	; 0x2fe <setLED+0xb4>
 2e4:	62 30       	cpi	r22, 0x02	; 2
 2e6:	71 05       	cpc	r23, r1
 2e8:	f9 f4       	brne	.+62     	; 0x328 <setLED+0xde>
 2ea:	14 c0       	rjmp	.+40     	; 0x314 <setLED+0xca>
   {
   case LedOff:
      *port |= (1 << operand);
 2ec:	02 2e       	mov	r0, r18
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <setLED+0xa8>
 2f0:	66 0f       	add	r22, r22
 2f2:	0a 94       	dec	r0
 2f4:	ea f7       	brpl	.-6      	; 0x2f0 <setLED+0xa6>
 2f6:	80 81       	ld	r24, Z
 2f8:	86 2b       	or	r24, r22
 2fa:	80 83       	st	Z, r24
      break;
 2fc:	08 95       	ret
   case LedOn:
      *port &= ~(1 << operand);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	01 c0       	rjmp	.+2      	; 0x308 <setLED+0xbe>
 306:	88 0f       	add	r24, r24
 308:	0a 94       	dec	r0
 30a:	ea f7       	brpl	.-6      	; 0x306 <setLED+0xbc>
 30c:	80 95       	com	r24
 30e:	90 81       	ld	r25, Z
 310:	98 23       	and	r25, r24
 312:	09 c0       	rjmp	.+18     	; 0x326 <setLED+0xdc>
      break;
   case LedToggle:
      *port ^= (1 << operand);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 2e       	mov	r0, r18
 31a:	01 c0       	rjmp	.+2      	; 0x31e <setLED+0xd4>
 31c:	88 0f       	add	r24, r24
 31e:	0a 94       	dec	r0
 320:	ea f7       	brpl	.-6      	; 0x31c <setLED+0xd2>
 322:	90 81       	ld	r25, Z
 324:	98 27       	eor	r25, r24
 326:	90 83       	st	Z, r25
 328:	08 95       	ret

0000032a <blinkingHandler>:
{
   PORTA = 0x00;
}

void blinkingHandler(void)
{
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd e2       	ldi	r28, 0x2D	; 45
 338:	d1 e0       	ldi	r29, 0x01	; 1
   for (int i = 0; i < Led_Display_Max_Counter; ++i)
 33a:	e1 2c       	mov	r14, r1
 33c:	f1 2c       	mov	r15, r1
   {
      if (blinkingInformations[i].isBlinking == 1)
 33e:	88 81       	ld	r24, Y
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	e9 f4       	brne	.+58     	; 0x37e <blinkingHandler+0x54>
      {
         blinkingInformations[i].blinkingCounter++;
 344:	4d 81       	ldd	r20, Y+5	; 0x05
 346:	5e 81       	ldd	r21, Y+6	; 0x06
 348:	6f 81       	ldd	r22, Y+7	; 0x07
 34a:	78 85       	ldd	r23, Y+8	; 0x08
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	6f 4f       	sbci	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	4d 83       	std	Y+5, r20	; 0x05
 356:	5e 83       	std	Y+6, r21	; 0x06
 358:	6f 83       	std	Y+7, r22	; 0x07
 35a:	78 87       	std	Y+8, r23	; 0x08

         if (blinkingInformations[i].blinkingCounter >= blinkingInformations[i].blinkingFrequency)
 35c:	09 81       	ldd	r16, Y+1	; 0x01
 35e:	1a 81       	ldd	r17, Y+2	; 0x02
 360:	2b 81       	ldd	r18, Y+3	; 0x03
 362:	3c 81       	ldd	r19, Y+4	; 0x04
 364:	40 17       	cp	r20, r16
 366:	51 07       	cpc	r21, r17
 368:	62 07       	cpc	r22, r18
 36a:	73 07       	cpc	r23, r19
 36c:	40 f0       	brcs	.+16     	; 0x37e <blinkingHandler+0x54>
         {
            setLED(i, LedToggle);
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	c7 01       	movw	r24, r14
 374:	6a df       	rcall	.-300    	; 0x24a <setLED>
            blinkingInformations[i].blinkingCounter = 0;
 376:	1d 82       	std	Y+5, r1	; 0x05
 378:	1e 82       	std	Y+6, r1	; 0x06
 37a:	1f 82       	std	Y+7, r1	; 0x07
 37c:	18 86       	std	Y+8, r1	; 0x08
   PORTA = 0x00;
}

void blinkingHandler(void)
{
   for (int i = 0; i < Led_Display_Max_Counter; ++i)
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	e8 1a       	sub	r14, r24
 382:	f8 0a       	sbc	r15, r24
 384:	29 96       	adiw	r28, 0x09	; 9
 386:	80 e1       	ldi	r24, 0x10	; 16
 388:	e8 16       	cp	r14, r24
 38a:	f1 04       	cpc	r15, r1
 38c:	c1 f6       	brne	.-80     	; 0x33e <blinkingHandler+0x14>
            setLED(i, LedToggle);
            blinkingInformations[i].blinkingCounter = 0;
         }
      }
   }
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	08 95       	ret

0000039c <setLEDBlinking>:

void setLEDBlinking(ledDisplay displayed,
                    uint8_t blinking,
                    uint32_t frequency)
{
   if (displayed < Led_Display_Max_Counter)
 39c:	80 31       	cpi	r24, 0x10	; 16
 39e:	91 05       	cpc	r25, r1
 3a0:	68 f4       	brcc	.+26     	; 0x3bc <setLEDBlinking+0x20>
   {
      blinkingInformations[displayed].isBlinking = blinking;
 3a2:	79 e0       	ldi	r23, 0x09	; 9
 3a4:	78 9f       	mul	r23, r24
 3a6:	f0 01       	movw	r30, r0
 3a8:	79 9f       	mul	r23, r25
 3aa:	f0 0d       	add	r31, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	e3 5d       	subi	r30, 0xD3	; 211
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	60 83       	st	Z, r22
      blinkingInformations[displayed].blinkingFrequency = frequency;
 3b4:	21 83       	std	Z+1, r18	; 0x01
 3b6:	32 83       	std	Z+2, r19	; 0x02
 3b8:	43 83       	std	Z+3, r20	; 0x03
 3ba:	54 83       	std	Z+4, r21	; 0x04
 3bc:	08 95       	ret

000003be <initGameModeModul>:
      setSpeed(0);
   }
}

void setDifficulty(difficulties difficultyToSet)
{
 3be:	bf d1       	rcall	.+894    	; 0x73e <getTimerTick1Sec>
 3c0:	80 93 bd 01 	sts	0x01BD, r24
 3c4:	10 92 bf 01 	sts	0x01BF, r1
 3c8:	08 95       	ret

000003ca <runGame>:
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	80 91 bf 01 	lds	r24, 0x01BF
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	09 f5       	brne	.+66     	; 0x418 <runGame+0x4e>
 3d6:	68 d3       	rcall	.+1744   	; 0xaa8 <rand>
 3d8:	ec 01       	movw	r28, r24
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	08 d2       	rcall	.+1040   	; 0x7f0 <setSpeed>
 3e0:	80 91 bd 01 	lds	r24, 0x01BD
 3e4:	af d1       	rcall	.+862    	; 0x744 <getTimerDiff1Sec>
 3e6:	85 30       	cpi	r24, 0x05	; 5
 3e8:	f8 f0       	brcs	.+62     	; 0x428 <runGame+0x5e>
 3ea:	a9 d1       	rcall	.+850    	; 0x73e <getTimerTick1Sec>
 3ec:	80 93 bd 01 	sts	0x01BD, r24
 3f0:	ce 01       	movw	r24, r28
 3f2:	64 e6       	ldi	r22, 0x64	; 100
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	c3 d2       	rcall	.+1414   	; 0x97e <__divmodhi4>
 3f8:	82 33       	cpi	r24, 0x32	; 50
 3fa:	34 f0       	brlt	.+12     	; 0x408 <runGame+0x3e>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	07 d2       	rcall	.+1038   	; 0x810 <setDirection>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	05 c0       	rjmp	.+10     	; 0x412 <runGame+0x48>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 d2       	rcall	.+1026   	; 0x810 <setDirection>
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	ce ce       	rjmp	.-612    	; 0x1b4 <setSegementDisplay>
 418:	92 d1       	rcall	.+804    	; 0x73e <getTimerTick1Sec>
 41a:	80 93 bd 01 	sts	0x01BD, r24
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	e4 c1       	rjmp	.+968    	; 0x7f0 <setSpeed>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <setStartGame>:

}

void setStartGame(uint8_t start)
{
   startGame = start;
 42e:	80 93 bf 01 	sts	0x01BF, r24
 432:	08 95       	ret

00000434 <initPorts>:
void portHandler(void);

void initPorts(void)
{
   //switch Port A to OutPut
   DDRA = 0xFF;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	8a bb       	out	0x1a, r24	; 26

   // set PortB directions (piezo and motor control)
   DDRB |= (1 << PIEZO);
 438:	b8 9a       	sbi	0x17, 0	; 23
   DDRB |= (1 << MOTOR_IN_1) | (1 << MOTOR_IN_2);
 43a:	97 b3       	in	r25, 0x17	; 23
 43c:	90 66       	ori	r25, 0x60	; 96
 43e:	97 bb       	out	0x17, r25	; 23
   DDRB |= (1 << MOTOR_ENABLE);
 440:	bf 9a       	sbi	0x17, 7	; 23

   // set selected PortB pins to high
   PORTB |= (1 << MOTOR_ENABLE);
 442:	c7 9a       	sbi	0x18, 7	; 24
   PORTB |= (1 << PIEZO);
 444:	c0 9a       	sbi	0x18, 0	; 24

   // switch Port C to OutPut (LEDPort1)
   DDRC = 0xFF;
 446:	84 bb       	out	0x14, r24	; 20

   // switch Port D to OutPut (LEDPort2)
   DDRD = 0xFF;
 448:	81 bb       	out	0x11, r24	; 17

   //switch Port E to InPut
   DDRE = 0x00;
 44a:	12 b8       	out	0x02, r1	; 2

   //switch Port F to InPut
   DDRF = 0x00;
 44c:	10 92 61 00 	sts	0x0061, r1
   PORTF = 0xFF;
 450:	80 93 62 00 	sts	0x0062, r24

   //init the function pointer list
   for (int i = 0; i < Function_Pointer_Options_Enum_Count; ++i)
   {
      FunctionPointerList[i] = NULL;
 454:	10 92 09 01 	sts	0x0109, r1
 458:	10 92 08 01 	sts	0x0108, r1
 45c:	10 92 0b 01 	sts	0x010B, r1
 460:	10 92 0a 01 	sts	0x010A, r1
 464:	10 92 0d 01 	sts	0x010D, r1
 468:	10 92 0c 01 	sts	0x010C, r1
 46c:	10 92 0f 01 	sts	0x010F, r1
 470:	10 92 0e 01 	sts	0x010E, r1
 474:	10 92 11 01 	sts	0x0111, r1
 478:	10 92 10 01 	sts	0x0110, r1
 47c:	10 92 13 01 	sts	0x0113, r1
 480:	10 92 12 01 	sts	0x0112, r1
   }

   setFunctionPointerTimer0(portHandler);
 484:	80 e5       	ldi	r24, 0x50	; 80
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	9e c1       	rjmp	.+828    	; 0x7c6 <setFunctionPointerTimer0>

0000048a <isSwitchPressed>:
}

uint8_t isSwitchPressed(uint8_t hardwareSwitch)
{
   if (PINF & (1 << hardwareSwitch))
 48a:	20 b1       	in	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <isSwitchPressed+0xa>
 490:	35 95       	asr	r19
 492:	27 95       	ror	r18
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <isSwitchPressed+0x6>
 498:	82 2f       	mov	r24, r18
 49a:	80 95       	com	r24
   }
   else
   {
      return 1;
   }
}
 49c:	81 70       	andi	r24, 0x01	; 1
 49e:	08 95       	ret

000004a0 <portHandler>:
      return 0;
   }
}

void portHandler(void)
{
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
   static uint8_t pinBuffer = 0;
   static uint32_t timeCounter = 0;
   timeCounter++;
 4a8:	c0 90 14 01 	lds	r12, 0x0114
 4ac:	d0 90 15 01 	lds	r13, 0x0115
 4b0:	e0 90 16 01 	lds	r14, 0x0116
 4b4:	f0 90 17 01 	lds	r15, 0x0117
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	c8 1a       	sub	r12, r24
 4bc:	d8 0a       	sbc	r13, r24
 4be:	e8 0a       	sbc	r14, r24
 4c0:	f8 0a       	sbc	r15, r24
 4c2:	c0 92 14 01 	sts	0x0114, r12
 4c6:	d0 92 15 01 	sts	0x0115, r13
 4ca:	e0 92 16 01 	sts	0x0116, r14
 4ce:	f0 92 17 01 	sts	0x0117, r15

   if (pinBuffer == 0)
 4d2:	80 91 18 01 	lds	r24, 0x0118
 4d6:	81 11       	cpse	r24, r1
 4d8:	3b c0       	rjmp	.+118    	; 0x550 <portHandler+0xb0>
   {
      if (isSwitchPressed(SWITCH_1) && isSwitchPressed(SWITCH_2) && timeCounter >= TIME_ONE_SEC)
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	d6 df       	rcall	.-84     	; 0x48a <isSwitchPressed>
 4de:	88 23       	and	r24, r24
 4e0:	69 f0       	breq	.+26     	; 0x4fc <portHandler+0x5c>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	d2 df       	rcall	.-92     	; 0x48a <isSwitchPressed>
 4e6:	88 23       	and	r24, r24
 4e8:	49 f0       	breq	.+18     	; 0x4fc <portHandler+0x5c>
 4ea:	8c e3       	ldi	r24, 0x3C	; 60
 4ec:	c8 16       	cp	r12, r24
 4ee:	d1 04       	cpc	r13, r1
 4f0:	e1 04       	cpc	r14, r1
 4f2:	f1 04       	cpc	r15, r1
 4f4:	18 f0       	brcs	.+6      	; 0x4fc <portHandler+0x5c>
      {
         pinBuffer = 0x01;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 18 01 	sts	0x0118, r24
      }

      if (isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2) && timeCounter >= TIME_ONE_SEC)
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	c5 df       	rcall	.-118    	; 0x48a <isSwitchPressed>
 500:	88 23       	and	r24, r24
 502:	69 f0       	breq	.+26     	; 0x51e <portHandler+0x7e>
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	c1 df       	rcall	.-126    	; 0x48a <isSwitchPressed>
 508:	81 11       	cpse	r24, r1
 50a:	09 c0       	rjmp	.+18     	; 0x51e <portHandler+0x7e>
 50c:	8c e3       	ldi	r24, 0x3C	; 60
 50e:	c8 16       	cp	r12, r24
 510:	d1 04       	cpc	r13, r1
 512:	e1 04       	cpc	r14, r1
 514:	f1 04       	cpc	r15, r1
 516:	18 f0       	brcs	.+6      	; 0x51e <portHandler+0x7e>
      {
         pinBuffer = 0x02;
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	80 93 18 01 	sts	0x0118, r24
      }

      if (!isSwitchPressed(SWITCH_1) && isSwitchPressed(SWITCH_2) && timeCounter >= TIME_ONE_SEC)
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	b4 df       	rcall	.-152    	; 0x48a <isSwitchPressed>
 522:	81 11       	cpse	r24, r1
 524:	0d c0       	rjmp	.+26     	; 0x540 <portHandler+0xa0>
 526:	b1 df       	rcall	.-158    	; 0x48a <isSwitchPressed>
 528:	88 23       	and	r24, r24
 52a:	51 f0       	breq	.+20     	; 0x540 <portHandler+0xa0>
 52c:	8c e3       	ldi	r24, 0x3C	; 60
 52e:	c8 16       	cp	r12, r24
 530:	d1 04       	cpc	r13, r1
 532:	e1 04       	cpc	r14, r1
 534:	f1 04       	cpc	r15, r1
 536:	20 f0       	brcs	.+8      	; 0x540 <portHandler+0xa0>
      {
         pinBuffer = 0x04;
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	80 93 18 01 	sts	0x0118, r24
 53e:	88 c0       	rjmp	.+272    	; 0x650 <portHandler+0x1b0>
      }
      else if (!isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2))
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	a3 df       	rcall	.-186    	; 0x48a <isSwitchPressed>
 544:	81 11       	cpse	r24, r1
 546:	84 c0       	rjmp	.+264    	; 0x650 <portHandler+0x1b0>
 548:	a0 df       	rcall	.-192    	; 0x48a <isSwitchPressed>
 54a:	81 11       	cpse	r24, r1
 54c:	81 c0       	rjmp	.+258    	; 0x650 <portHandler+0x1b0>
 54e:	76 c0       	rjmp	.+236    	; 0x63c <portHandler+0x19c>
      }

   }
   else if (pinBuffer != 0)
   {
      if (pinBuffer == 0x01)
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	29 f5       	brne	.+74     	; 0x59e <portHandler+0xfe>
      {
         if (isSwitchPressed(SWITCH_1) && isSwitchPressed(SWITCH_2)
 554:	9a df       	rcall	.-204    	; 0x48a <isSwitchPressed>
 556:	88 23       	and	r24, r24
 558:	79 f0       	breq	.+30     	; 0x578 <portHandler+0xd8>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	96 df       	rcall	.-212    	; 0x48a <isSwitchPressed>
 55e:	88 23       	and	r24, r24
 560:	59 f0       	breq	.+22     	; 0x578 <portHandler+0xd8>
             && timeCounter >= TIME_THREE_SEC)
 562:	84 eb       	ldi	r24, 0xB4	; 180
 564:	c8 16       	cp	r12, r24
 566:	d1 04       	cpc	r13, r1
 568:	e1 04       	cpc	r14, r1
 56a:	f1 04       	cpc	r15, r1
 56c:	28 f0       	brcs	.+10     	; 0x578 <portHandler+0xd8>
         {
            if (FunctionPointerList[Pressed_Switch_Both_Three_Seconds] != NULL)
 56e:	e0 91 12 01 	lds	r30, 0x0112
 572:	f0 91 13 01 	lds	r31, 0x0113
 576:	5f c0       	rjmp	.+190    	; 0x636 <portHandler+0x196>
            }

            pinBuffer = 0;
            timeCounter = 0;
         }
         else if (!isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2)
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	87 df       	rcall	.-242    	; 0x48a <isSwitchPressed>
 57c:	81 11       	cpse	r24, r1
 57e:	68 c0       	rjmp	.+208    	; 0x650 <portHandler+0x1b0>
 580:	84 df       	rcall	.-248    	; 0x48a <isSwitchPressed>
 582:	81 11       	cpse	r24, r1
 584:	65 c0       	rjmp	.+202    	; 0x650 <portHandler+0x1b0>
                  && timeCounter < TIME_THREE_SEC)
 586:	84 eb       	ldi	r24, 0xB4	; 180
 588:	c8 16       	cp	r12, r24
 58a:	d1 04       	cpc	r13, r1
 58c:	e1 04       	cpc	r14, r1
 58e:	f1 04       	cpc	r15, r1
 590:	08 f0       	brcs	.+2      	; 0x594 <portHandler+0xf4>
 592:	5e c0       	rjmp	.+188    	; 0x650 <portHandler+0x1b0>
         {
            if (FunctionPointerList[Pressed_Switch_Both_One_Seconds] != NULL)
 594:	e0 91 10 01 	lds	r30, 0x0110
 598:	f0 91 11 01 	lds	r31, 0x0111
 59c:	4c c0       	rjmp	.+152    	; 0x636 <portHandler+0x196>

            pinBuffer = 0;
            timeCounter = 0;
         }
      }
      else if (pinBuffer == 0x02)
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	29 f5       	brne	.+74     	; 0x5ec <portHandler+0x14c>
      {
         if (isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2)
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	72 df       	rcall	.-284    	; 0x48a <isSwitchPressed>
 5a6:	88 23       	and	r24, r24
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <portHandler+0x128>
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	6e df       	rcall	.-292    	; 0x48a <isSwitchPressed>
 5ae:	81 11       	cpse	r24, r1
 5b0:	0b c0       	rjmp	.+22     	; 0x5c8 <portHandler+0x128>
             && timeCounter >= TIME_THREE_SEC)
 5b2:	84 eb       	ldi	r24, 0xB4	; 180
 5b4:	c8 16       	cp	r12, r24
 5b6:	d1 04       	cpc	r13, r1
 5b8:	e1 04       	cpc	r14, r1
 5ba:	f1 04       	cpc	r15, r1
 5bc:	28 f0       	brcs	.+10     	; 0x5c8 <portHandler+0x128>
         {
            if (FunctionPointerList[Pressed_Switch_1_Three_Seconds] != NULL)
 5be:	e0 91 0c 01 	lds	r30, 0x010C
 5c2:	f0 91 0d 01 	lds	r31, 0x010D
 5c6:	37 c0       	rjmp	.+110    	; 0x636 <portHandler+0x196>
            }

            pinBuffer = 0;
            timeCounter = 0;
         }
         else if (!isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2)
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	5f df       	rcall	.-322    	; 0x48a <isSwitchPressed>
 5cc:	81 11       	cpse	r24, r1
 5ce:	40 c0       	rjmp	.+128    	; 0x650 <portHandler+0x1b0>
 5d0:	5c df       	rcall	.-328    	; 0x48a <isSwitchPressed>
 5d2:	81 11       	cpse	r24, r1
 5d4:	3d c0       	rjmp	.+122    	; 0x650 <portHandler+0x1b0>
                  && timeCounter < TIME_THREE_SEC)
 5d6:	84 eb       	ldi	r24, 0xB4	; 180
 5d8:	c8 16       	cp	r12, r24
 5da:	d1 04       	cpc	r13, r1
 5dc:	e1 04       	cpc	r14, r1
 5de:	f1 04       	cpc	r15, r1
 5e0:	b8 f5       	brcc	.+110    	; 0x650 <portHandler+0x1b0>
         {
            if (FunctionPointerList[Pressed_Switch_1_One_Seconds] != NULL)
 5e2:	e0 91 08 01 	lds	r30, 0x0108
 5e6:	f0 91 09 01 	lds	r31, 0x0109
 5ea:	25 c0       	rjmp	.+74     	; 0x636 <portHandler+0x196>

            pinBuffer = 0;
            timeCounter = 0;
         }
      }
      else if (pinBuffer == 0x04)
 5ec:	84 30       	cpi	r24, 0x04	; 4
 5ee:	81 f5       	brne	.+96     	; 0x650 <portHandler+0x1b0>
      {
         if (!isSwitchPressed(SWITCH_1) && isSwitchPressed(SWITCH_2)
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	4b df       	rcall	.-362    	; 0x48a <isSwitchPressed>
 5f4:	81 11       	cpse	r24, r1
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <portHandler+0x174>
 5f8:	48 df       	rcall	.-368    	; 0x48a <isSwitchPressed>
 5fa:	88 23       	and	r24, r24
 5fc:	59 f0       	breq	.+22     	; 0x614 <portHandler+0x174>
             && timeCounter >= TIME_THREE_SEC)
 5fe:	84 eb       	ldi	r24, 0xB4	; 180
 600:	c8 16       	cp	r12, r24
 602:	d1 04       	cpc	r13, r1
 604:	e1 04       	cpc	r14, r1
 606:	f1 04       	cpc	r15, r1
 608:	28 f0       	brcs	.+10     	; 0x614 <portHandler+0x174>
         {
            if (FunctionPointerList[Pressed_Switch_2_Three_Seconds] != NULL)
 60a:	e0 91 0e 01 	lds	r30, 0x010E
 60e:	f0 91 0f 01 	lds	r31, 0x010F
 612:	11 c0       	rjmp	.+34     	; 0x636 <portHandler+0x196>
            }

            pinBuffer = 0;
            timeCounter = 0;
         }
         else if (!isSwitchPressed(SWITCH_1) && !isSwitchPressed(SWITCH_2)
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	39 df       	rcall	.-398    	; 0x48a <isSwitchPressed>
 618:	81 11       	cpse	r24, r1
 61a:	1a c0       	rjmp	.+52     	; 0x650 <portHandler+0x1b0>
 61c:	36 df       	rcall	.-404    	; 0x48a <isSwitchPressed>
 61e:	81 11       	cpse	r24, r1
 620:	17 c0       	rjmp	.+46     	; 0x650 <portHandler+0x1b0>
                  && timeCounter < TIME_THREE_SEC)
 622:	84 eb       	ldi	r24, 0xB4	; 180
 624:	c8 16       	cp	r12, r24
 626:	d1 04       	cpc	r13, r1
 628:	e1 04       	cpc	r14, r1
 62a:	f1 04       	cpc	r15, r1
 62c:	88 f4       	brcc	.+34     	; 0x650 <portHandler+0x1b0>
         {
            if (FunctionPointerList[Pressed_Switch_2_One_Seconds] != NULL)
 62e:	e0 91 0a 01 	lds	r30, 0x010A
 632:	f0 91 0b 01 	lds	r31, 0x010B
 636:	30 97       	sbiw	r30, 0x00	; 0
 638:	09 f0       	breq	.+2      	; 0x63c <portHandler+0x19c>
            {
               FunctionPointerList[Pressed_Switch_2_One_Seconds]();
 63a:	09 95       	icall
            }

            pinBuffer = 0;
 63c:	10 92 18 01 	sts	0x0118, r1
            timeCounter = 0;
 640:	10 92 14 01 	sts	0x0114, r1
 644:	10 92 15 01 	sts	0x0115, r1
 648:	10 92 16 01 	sts	0x0116, r1
 64c:	10 92 17 01 	sts	0x0117, r1
         }
      }
   }
}
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	df 90       	pop	r13
 656:	cf 90       	pop	r12
 658:	08 95       	ret

0000065a <setFunctionPointerSwitch>:
}
//Set void Function in the FuncionPoinerList0
uint8_t setFunctionPointerSwitch(functionPointerType type,
                                 void (*fp)(void))
{
   if (fp == NULL || type >= Function_Pointer_Options_Enum_Count)
 65a:	61 15       	cp	r22, r1
 65c:	71 05       	cpc	r23, r1
 65e:	61 f0       	breq	.+24     	; 0x678 <setFunctionPointerSwitch+0x1e>
 660:	86 30       	cpi	r24, 0x06	; 6
 662:	91 05       	cpc	r25, r1
 664:	48 f4       	brcc	.+18     	; 0x678 <setFunctionPointerSwitch+0x1e>
   {
      return 1;
   }
   else
   {
      FunctionPointerList[type] = fp;
 666:	fc 01       	movw	r30, r24
 668:	ee 0f       	add	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	e8 5f       	subi	r30, 0xF8	; 248
 66e:	fe 4f       	sbci	r31, 0xFE	; 254
 670:	71 83       	std	Z+1, r23	; 0x01
 672:	60 83       	st	Z, r22
      return 0;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
uint8_t setFunctionPointerSwitch(functionPointerType type,
                                 void (*fp)(void))
{
   if (fp == NULL || type >= Function_Pointer_Options_Enum_Count)
   {
      return 1;
 678:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
      FunctionPointerList[type] = fp;
      return 0;
   }
}
 67a:	08 95       	ret

0000067c <__vector_16>:
   {
      helpTick = timerTick10mSec + 255;
   }

   return (uint8_t) helpTick - timerTick;
}
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
 686:	0b b6       	in	r0, 0x3b	; 59
 688:	0f 92       	push	r0
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	ef 93       	push	r30
 6a8:	ff 93       	push	r31
 6aa:	82 eb       	ldi	r24, 0xB2	; 178
 6ac:	82 bf       	out	0x32, r24	; 50
 6ae:	80 91 1b 01 	lds	r24, 0x011B
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	80 93 1b 01 	sts	0x011B, r24
 6b8:	80 91 1a 01 	lds	r24, 0x011A
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	80 93 1a 01 	sts	0x011A, r24
 6c2:	80 91 1a 01 	lds	r24, 0x011A
 6c6:	84 36       	cpi	r24, 0x64	; 100
 6c8:	38 f0       	brcs	.+14     	; 0x6d8 <__vector_16+0x5c>
 6ca:	80 91 19 01 	lds	r24, 0x0119
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	80 93 19 01 	sts	0x0119, r24
 6d4:	10 92 1a 01 	sts	0x011A, r1
 6d8:	80 91 1c 01 	lds	r24, 0x011C
 6dc:	90 91 1d 01 	lds	r25, 0x011D
 6e0:	89 2b       	or	r24, r25
 6e2:	b1 f4       	brne	.+44     	; 0x710 <__vector_16+0x94>
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	90 93 1d 01 	sts	0x011D, r25
 6ec:	80 93 1c 01 	sts	0x011C, r24
 6f0:	00 91 1e 01 	lds	r16, 0x011E
 6f4:	cf e1       	ldi	r28, 0x1F	; 31
 6f6:	d1 e0       	ldi	r29, 0x01	; 1
 6f8:	10 e0       	ldi	r17, 0x00	; 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__vector_16+0x88>
 6fc:	e9 91       	ld	r30, Y+
 6fe:	f9 91       	ld	r31, Y+
 700:	09 95       	icall
 702:	1f 5f       	subi	r17, 0xFF	; 255
 704:	10 13       	cpse	r17, r16
 706:	fa cf       	rjmp	.-12     	; 0x6fc <__vector_16+0x80>
 708:	10 92 1d 01 	sts	0x011D, r1
 70c:	10 92 1c 01 	sts	0x011C, r1
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	0f 90       	pop	r0
 732:	0b be       	out	0x3b, r0	; 59
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <getTimerTick1Sec>:

uint8_t getTimerTick1Sec(void)
{

   return timerTick1Sec;
 73e:	80 91 19 01 	lds	r24, 0x0119
}
 742:	08 95       	ret

00000744 <getTimerDiff1Sec>:

uint8_t getTimerDiff1Sec(uint8_t timerTick)
{

   uint16_t helpTick = timerTick1Sec;
 744:	20 91 19 01 	lds	r18, 0x0119
 748:	30 e0       	ldi	r19, 0x00	; 0

   if (helpTick < timerTick)
 74a:	48 2f       	mov	r20, r24
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	24 17       	cp	r18, r20
 750:	35 07       	cpc	r19, r21
 752:	28 f4       	brcc	.+10     	; 0x75e <getTimerDiff1Sec+0x1a>
   {
      helpTick = timerTick1Sec + 255;
 754:	20 91 19 01 	lds	r18, 0x0119
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	21 50       	subi	r18, 0x01	; 1
 75c:	3f 4f       	sbci	r19, 0xFF	; 255
   }

   return (uint8_t) helpTick - timerTick;
}
 75e:	92 2f       	mov	r25, r18
 760:	98 1b       	sub	r25, r24
 762:	89 2f       	mov	r24, r25
 764:	08 95       	ret

00000766 <enableTimer0Interrupt>:

void enableTimer0Interrupt(void)
{
   TIMSK |= 0x01;
 766:	87 b7       	in	r24, 0x37	; 55
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	87 bf       	out	0x37, r24	; 55
 76c:	08 95       	ret

0000076e <setPWMOutput>:
   if(duty > MAX_PWM_VALUE)
   {
      duty = MAX_PWM_VALUE;
   }

   if (channel < PWM_Channel_Enum_Counter)
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	91 05       	cpc	r25, r1
 772:	70 f4       	brcc	.+28     	; 0x790 <setPWMOutput+0x22>
 774:	9b 01       	movw	r18, r22
 776:	61 15       	cp	r22, r1
 778:	44 e0       	ldi	r20, 0x04	; 4
 77a:	74 07       	cpc	r23, r20
 77c:	10 f0       	brcs	.+4      	; 0x782 <setPWMOutput+0x14>
 77e:	2f ef       	ldi	r18, 0xFF	; 255
 780:	33 e0       	ldi	r19, 0x03	; 3
   {
      switch (channel)
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	19 f0       	breq	.+6      	; 0x78c <setPWMOutput+0x1e>
      {
      case PWM_Channel_1A:
         OCR1A = duty;
 786:	3b bd       	out	0x2b, r19	; 43
 788:	2a bd       	out	0x2a, r18	; 42
         break;
 78a:	08 95       	ret
      case PWM_Channel_1B:
         OCR1B = duty;
 78c:	39 bd       	out	0x29, r19	; 41
 78e:	28 bd       	out	0x28, r18	; 40
 790:	08 95       	ret

00000792 <timer0_init>:
// WGM: CTC
// desired value: 10mSec
// actual value: 10,112mSec (-1,1%)
void timer0_init(void)
{
   TCCR0 = 0x00; //stop
 792:	13 be       	out	0x33, r1	; 51
   ASSR = 0x00; //set async mode
 794:	10 be       	out	0x30, r1	; 48
   TCNT0 = 0xB2; //set count
 796:	82 eb       	ldi	r24, 0xB2	; 178
 798:	82 bf       	out	0x32, r24	; 50
   OCR0 = 0x4E;
 79a:	8e e4       	ldi	r24, 0x4E	; 78
 79c:	81 bf       	out	0x31, r24	; 49
   TCCR0 = 0x07; //start timer
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	83 bf       	out	0x33, r24	; 51
 7a2:	08 95       	ret

000007a4 <PWM_init>:
}

void PWM_init(void)
{
   TCCR1A = 0b10101011;
 7a4:	8b ea       	ldi	r24, 0xAB	; 171
 7a6:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = 0b00001010;
 7a8:	8a e0       	ldi	r24, 0x0A	; 10
 7aa:	8e bd       	out	0x2e, r24	; 46
   OCR1AH = 0x03;
 7ac:	93 e0       	ldi	r25, 0x03	; 3
 7ae:	9b bd       	out	0x2b, r25	; 43
   OCR1AL = 0xFF;
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	8a bd       	out	0x2a, r24	; 42
   OCR1BH = 0x03;
 7b4:	99 bd       	out	0x29, r25	; 41
   OCR1BL = 0xFF;
 7b6:	88 bd       	out	0x28, r24	; 40
   OCR1CH = 0x03;
 7b8:	90 93 79 00 	sts	0x0079, r25
   OCR1CL = 0xFF;
 7bc:	80 93 78 00 	sts	0x0078, r24
 7c0:	08 95       	ret

000007c2 <initTimer>:
 * publics functions
 */
void initTimer(void)
{
   //init the second timer with 10mSec
   timer0_init();
 7c2:	e7 df       	rcall	.-50     	; 0x792 <timer0_init>

   PWM_init();
 7c4:	ef cf       	rjmp	.-34     	; 0x7a4 <PWM_init>

000007c6 <setFunctionPointerTimer0>:
}

//Set void Function in the FuncionPoinerList0
uint8_t setFunctionPointerTimer0(void (*fp)(void))
{
   if ((fp == NULL) || (functionPointerCount[0] == maxfunctionPointerCount[0]))
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	89 f0       	breq	.+34     	; 0x7ec <setFunctionPointerTimer0+0x26>
 7ca:	20 91 1e 01 	lds	r18, 0x011E
 7ce:	23 30       	cpi	r18, 0x03	; 3
 7d0:	69 f0       	breq	.+26     	; 0x7ec <setFunctionPointerTimer0+0x26>

static uint8_t addFunctionPointer(uint8_t tidx,
                                  functionPointerTimer fp)
{
   uint8_t oldCount = functionPointerCount[tidx];
   FunctionPointerList[tidx][oldCount] = fp;
 7d2:	e2 2f       	mov	r30, r18
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	e1 5e       	subi	r30, 0xE1	; 225
 7dc:	fe 4f       	sbci	r31, 0xFE	; 254
 7de:	91 83       	std	Z+1, r25	; 0x01
 7e0:	80 83       	st	Z, r24
   functionPointerCount[tidx] = oldCount + 1;
 7e2:	2f 5f       	subi	r18, 0xFF	; 255
 7e4:	20 93 1e 01 	sts	0x011E, r18
{
   if ((fp == NULL) || (functionPointerCount[0] == maxfunctionPointerCount[0]))
   {
      return 1;
   }
   return addFunctionPointer(0, fp);
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	08 95       	ret
//Set void Function in the FuncionPoinerList0
uint8_t setFunctionPointerTimer0(void (*fp)(void))
{
   if ((fp == NULL) || (functionPointerCount[0] == maxfunctionPointerCount[0]))
   {
      return 1;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
   }
   return addFunctionPointer(0, fp);
}
 7ee:	08 95       	ret

000007f0 <setSpeed>:
   setDirection(forwards);
   setSpeed(SPEED_STOP);
}

void setSpeed(uint16_t speed)
{
 7f0:	bc 01       	movw	r22, r24
 7f2:	61 15       	cp	r22, r1
 7f4:	84 e0       	ldi	r24, 0x04	; 4
 7f6:	78 07       	cpc	r23, r24
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <setSpeed+0xe>
 7fa:	6f ef       	ldi	r22, 0xFF	; 255
 7fc:	73 e0       	ldi	r23, 0x03	; 3
   if (speed > SPEED_MAX)
   {
      speed = SPEED_MAX;
   }
   currentSpeed = speed;
 7fe:	70 93 c4 01 	sts	0x01C4, r23
 802:	60 93 c3 01 	sts	0x01C3, r22
   setPWMOutput(forwardChannel, currentSpeed);
 806:	80 91 c5 01 	lds	r24, 0x01C5
 80a:	90 91 c6 01 	lds	r25, 0x01C6
 80e:	af cf       	rjmp	.-162    	; 0x76e <setPWMOutput>

00000810 <setDirection>:
}

void setDirection(movingDirection direction)
{
   if (forwards == direction)
 810:	00 97       	sbiw	r24, 0x00	; 0
 812:	49 f4       	brne	.+18     	; 0x826 <setDirection+0x16>
   {
      forwardChannel = PWM_Channel_1A;
 814:	10 92 c6 01 	sts	0x01C6, r1
 818:	10 92 c5 01 	sts	0x01C5, r1
      setPWMOutput(PWM_Channel_1B, SPEED_STOP);
 81c:	6a e0       	ldi	r22, 0x0A	; 10
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0b c0       	rjmp	.+22     	; 0x83c <setDirection+0x2c>
   }
   else if (backwards == direction)
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	91 05       	cpc	r25, r1
 82a:	49 f4       	brne	.+18     	; 0x83e <setDirection+0x2e>
   {
      forwardChannel = PWM_Channel_1B;
 82c:	90 93 c6 01 	sts	0x01C6, r25
 830:	80 93 c5 01 	sts	0x01C5, r24
      setPWMOutput(PWM_Channel_1A, SPEED_STOP);
 834:	6a e0       	ldi	r22, 0x0A	; 10
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	98 df       	rcall	.-208    	; 0x76e <setPWMOutput>
   }
   else
   {
      // no more directions
   }
   setPWMOutput(forwardChannel, currentSpeed);
 83e:	60 91 c3 01 	lds	r22, 0x01C3
 842:	70 91 c4 01 	lds	r23, 0x01C4
 846:	80 91 c5 01 	lds	r24, 0x01C5
 84a:	90 91 c6 01 	lds	r25, 0x01C6
 84e:	8f cf       	rjmp	.-226    	; 0x76e <setPWMOutput>

00000850 <initEngine>:
pwmChannel forwardChannel;
uint16_t currentSpeed;

void initEngine(void)
{
   setDirection(forwards);
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	dd df       	rcall	.-70     	; 0x810 <setDirection>
   setSpeed(SPEED_STOP);
 856:	8a e0       	ldi	r24, 0x0A	; 10
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	ca cf       	rjmp	.-108    	; 0x7f0 <setSpeed>

0000085c <clearAllDrinks>:
      searchDrinkStarts = 0;
   }
}

void clearAllDrinks(void)
{
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
   for (int i = Led_Red_1; i <= Led_Red_5; ++i)
 860:	c0 e0       	ldi	r28, 0x00	; 0
 862:	d0 e0       	ldi	r29, 0x00	; 0
   {
      setLED(i, LedOff);
 864:	61 e0       	ldi	r22, 0x01	; 1
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	ce 01       	movw	r24, r28
 86a:	ef dc       	rcall	.-1570   	; 0x24a <setLED>
      setLEDBlinking(i, 0, 0);
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	a9 01       	movw	r20, r18
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	ce 01       	movw	r24, r28
 876:	92 dd       	rcall	.-1244   	; 0x39c <setLEDBlinking>
   }
}

void clearAllDrinks(void)
{
   for (int i = Led_Red_1; i <= Led_Red_5; ++i)
 878:	21 96       	adiw	r28, 0x01	; 1
 87a:	c5 30       	cpi	r28, 0x05	; 5
 87c:	d1 05       	cpc	r29, r1
 87e:	91 f7       	brne	.-28     	; 0x864 <clearAllDrinks+0x8>
   {
      setLED(i, LedOff);
      setLEDBlinking(i, 0, 0);
   }
}
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <drinkModulHandler>:
/*
 * private functions
 */

void drinkModulHandler(void)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
   timeCounter++;
 88a:	60 91 27 01 	lds	r22, 0x0127
 88e:	70 91 28 01 	lds	r23, 0x0128
 892:	80 91 29 01 	lds	r24, 0x0129
 896:	90 91 2a 01 	lds	r25, 0x012A
 89a:	6f 5f       	subi	r22, 0xFF	; 255
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	8f 4f       	sbci	r24, 0xFF	; 255
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	60 93 27 01 	sts	0x0127, r22
 8a6:	70 93 28 01 	sts	0x0128, r23
 8aa:	80 93 29 01 	sts	0x0129, r24
 8ae:	90 93 2a 01 	sts	0x012A, r25
   static int oldRandomValue = 0;

   if (1 == searchDrinkStarts)
 8b2:	20 91 25 01 	lds	r18, 0x0125
 8b6:	30 91 26 01 	lds	r19, 0x0126
 8ba:	21 30       	cpi	r18, 0x01	; 1
 8bc:	31 05       	cpc	r19, r1
 8be:	09 f0       	breq	.+2      	; 0x8c2 <drinkModulHandler+0x3c>
 8c0:	3f c0       	rjmp	.+126    	; 0x940 <drinkModulHandler+0xba>
   {
      if (timeCounter < MAX_TIME_SEARCH)
 8c2:	64 3f       	cpi	r22, 0xF4	; 244
 8c4:	21 e0       	ldi	r18, 0x01	; 1
 8c6:	72 07       	cpc	r23, r18
 8c8:	81 05       	cpc	r24, r1
 8ca:	91 05       	cpc	r25, r1
 8cc:	08 f5       	brcc	.+66     	; 0x910 <drinkModulHandler+0x8a>
      {
         if ((timeCounter % LED_SHIFT_TIME) == 0)
 8ce:	25 e0       	ldi	r18, 0x05	; 5
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	66 d0       	rcall	.+204    	; 0x9a4 <__udivmodsi4>
 8d8:	67 2b       	or	r22, r23
 8da:	68 2b       	or	r22, r24
 8dc:	69 2b       	or	r22, r25
 8de:	09 f0       	breq	.+2      	; 0x8e2 <drinkModulHandler+0x5c>
 8e0:	3b c0       	rjmp	.+118    	; 0x958 <drinkModulHandler+0xd2>
         {
            int randomValue = rand();
 8e2:	e2 d0       	rcall	.+452    	; 0xaa8 <rand>
 8e4:	ec 01       	movw	r28, r24
            setLED(oldRandomValue, LedOff);
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	80 91 2b 01 	lds	r24, 0x012B
 8ee:	90 91 2c 01 	lds	r25, 0x012C
 8f2:	ab dc       	rcall	.-1706   	; 0x24a <setLED>
            setLED(randomValue % 5, LedOn);
 8f4:	ce 01       	movw	r24, r28
 8f6:	65 e0       	ldi	r22, 0x05	; 5
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	41 d0       	rcall	.+130    	; 0x97e <__divmodhi4>
 8fc:	d8 2f       	mov	r29, r24
 8fe:	c9 2f       	mov	r28, r25
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	a2 dc       	rcall	.-1724   	; 0x24a <setLED>
            oldRandomValue = randomValue % 5;
 906:	d0 93 2b 01 	sts	0x012B, r29
 90a:	c0 93 2c 01 	sts	0x012C, r28
 90e:	24 c0       	rjmp	.+72     	; 0x958 <drinkModulHandler+0xd2>
         }
      }
      else if (timeCounter == MAX_TIME_SEARCH)
 910:	64 3f       	cpi	r22, 0xF4	; 244
 912:	21 e0       	ldi	r18, 0x01	; 1
 914:	72 07       	cpc	r23, r18
 916:	81 05       	cpc	r24, r1
 918:	91 05       	cpc	r25, r1
 91a:	61 f4       	brne	.+24     	; 0x934 <drinkModulHandler+0xae>
      {
         setLEDBlinking(oldRandomValue, 1, 10);
 91c:	2a e0       	ldi	r18, 0x0A	; 10
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	61 e0       	ldi	r22, 0x01	; 1
 926:	80 91 2b 01 	lds	r24, 0x012B
 92a:	90 91 2c 01 	lds	r25, 0x012C
   else
   {
      timeCounter = 0;
      searchDrinkStarts = 0;
   }
}
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
            oldRandomValue = randomValue % 5;
         }
      }
      else if (timeCounter == MAX_TIME_SEARCH)
      {
         setLEDBlinking(oldRandomValue, 1, 10);
 932:	34 cd       	rjmp	.-1432   	; 0x39c <setLEDBlinking>
      }
      else if (timeCounter == (SHOW_TIME + MAX_TIME_SEARCH))
 934:	68 3e       	cpi	r22, 0xE8	; 232
 936:	73 40       	sbci	r23, 0x03	; 3
 938:	81 05       	cpc	r24, r1
 93a:	91 05       	cpc	r25, r1
 93c:	69 f4       	brne	.+26     	; 0x958 <drinkModulHandler+0xd2>
      {
         clearAllDrinks();
 93e:	8e df       	rcall	.-228    	; 0x85c <clearAllDrinks>
         searchDrinkStarts = 0;
      }
   }
   else
   {
      timeCounter = 0;
 940:	10 92 27 01 	sts	0x0127, r1
 944:	10 92 28 01 	sts	0x0128, r1
 948:	10 92 29 01 	sts	0x0129, r1
 94c:	10 92 2a 01 	sts	0x012A, r1
      searchDrinkStarts = 0;
 950:	10 92 26 01 	sts	0x0126, r1
 954:	10 92 25 01 	sts	0x0125, r1
   }
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	08 95       	ret

0000095e <initDrinkModul>:
/*
 * public functions
 */
void initDrinkModul(void)
{
   searchDrinkStarts = 0;
 95e:	10 92 26 01 	sts	0x0126, r1
 962:	10 92 25 01 	sts	0x0125, r1
   timeCounter = 0;
 966:	10 92 27 01 	sts	0x0127, r1
 96a:	10 92 28 01 	sts	0x0128, r1
 96e:	10 92 29 01 	sts	0x0129, r1
 972:	10 92 2a 01 	sts	0x012A, r1
   setFunctionPointerTimer0(drinkModulHandler);
 976:	83 e4       	ldi	r24, 0x43	; 67
 978:	94 e0       	ldi	r25, 0x04	; 4
 97a:	25 df       	rcall	.-438    	; 0x7c6 <setFunctionPointerTimer0>

   clearAllDrinks();
 97c:	6f cf       	rjmp	.-290    	; 0x85c <clearAllDrinks>

0000097e <__divmodhi4>:
 97e:	97 fb       	bst	r25, 7
 980:	07 2e       	mov	r0, r23
 982:	16 f4       	brtc	.+4      	; 0x988 <__divmodhi4+0xa>
 984:	00 94       	com	r0
 986:	06 d0       	rcall	.+12     	; 0x994 <__divmodhi4_neg1>
 988:	77 fd       	sbrc	r23, 7
 98a:	08 d0       	rcall	.+16     	; 0x99c <__divmodhi4_neg2>
 98c:	2d d0       	rcall	.+90     	; 0x9e8 <__udivmodhi4>
 98e:	07 fc       	sbrc	r0, 7
 990:	05 d0       	rcall	.+10     	; 0x99c <__divmodhi4_neg2>
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__divmodhi4_exit>

00000994 <__divmodhi4_neg1>:
 994:	90 95       	com	r25
 996:	81 95       	neg	r24
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	08 95       	ret

0000099c <__divmodhi4_neg2>:
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255

000009a2 <__divmodhi4_exit>:
 9a2:	08 95       	ret

000009a4 <__udivmodsi4>:
 9a4:	a1 e2       	ldi	r26, 0x21	; 33
 9a6:	1a 2e       	mov	r1, r26
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	fd 01       	movw	r30, r26
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__udivmodsi4_ep>

000009b0 <__udivmodsi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	ee 1f       	adc	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	a2 17       	cp	r26, r18
 9ba:	b3 07       	cpc	r27, r19
 9bc:	e4 07       	cpc	r30, r20
 9be:	f5 07       	cpc	r31, r21
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__udivmodsi4_ep>
 9c2:	a2 1b       	sub	r26, r18
 9c4:	b3 0b       	sbc	r27, r19
 9c6:	e4 0b       	sbc	r30, r20
 9c8:	f5 0b       	sbc	r31, r21

000009ca <__udivmodsi4_ep>:
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a 94       	dec	r1
 9d4:	69 f7       	brne	.-38     	; 0x9b0 <__udivmodsi4_loop>
 9d6:	60 95       	com	r22
 9d8:	70 95       	com	r23
 9da:	80 95       	com	r24
 9dc:	90 95       	com	r25
 9de:	9b 01       	movw	r18, r22
 9e0:	ac 01       	movw	r20, r24
 9e2:	bd 01       	movw	r22, r26
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret

000009e8 <__udivmodhi4>:
 9e8:	aa 1b       	sub	r26, r26
 9ea:	bb 1b       	sub	r27, r27
 9ec:	51 e1       	ldi	r21, 0x11	; 17
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <__udivmodhi4_ep>

000009f0 <__udivmodhi4_loop>:
 9f0:	aa 1f       	adc	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	a6 17       	cp	r26, r22
 9f6:	b7 07       	cpc	r27, r23
 9f8:	10 f0       	brcs	.+4      	; 0x9fe <__udivmodhi4_ep>
 9fa:	a6 1b       	sub	r26, r22
 9fc:	b7 0b       	sbc	r27, r23

000009fe <__udivmodhi4_ep>:
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	5a 95       	dec	r21
 a04:	a9 f7       	brne	.-22     	; 0x9f0 <__udivmodhi4_loop>
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	bc 01       	movw	r22, r24
 a0c:	cd 01       	movw	r24, r26
 a0e:	08 95       	ret

00000a10 <do_rand>:
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	ec 01       	movw	r28, r24
 a26:	68 81       	ld	r22, Y
 a28:	79 81       	ldd	r23, Y+1	; 0x01
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	9b 81       	ldd	r25, Y+3	; 0x03
 a2e:	61 15       	cp	r22, r1
 a30:	71 05       	cpc	r23, r1
 a32:	81 05       	cpc	r24, r1
 a34:	91 05       	cpc	r25, r1
 a36:	21 f4       	brne	.+8      	; 0xa40 <do_rand+0x30>
 a38:	64 e2       	ldi	r22, 0x24	; 36
 a3a:	79 ed       	ldi	r23, 0xD9	; 217
 a3c:	8b e5       	ldi	r24, 0x5B	; 91
 a3e:	97 e0       	ldi	r25, 0x07	; 7
 a40:	2d e1       	ldi	r18, 0x1D	; 29
 a42:	33 ef       	ldi	r19, 0xF3	; 243
 a44:	41 e0       	ldi	r20, 0x01	; 1
 a46:	50 e0       	ldi	r21, 0x00	; 0
 a48:	3d d0       	rcall	.+122    	; 0xac4 <__divmodsi4>
 a4a:	49 01       	movw	r8, r18
 a4c:	5a 01       	movw	r10, r20
 a4e:	9b 01       	movw	r18, r22
 a50:	ac 01       	movw	r20, r24
 a52:	a7 ea       	ldi	r26, 0xA7	; 167
 a54:	b1 e4       	ldi	r27, 0x41	; 65
 a56:	51 d0       	rcall	.+162    	; 0xafa <__muluhisi3>
 a58:	6b 01       	movw	r12, r22
 a5a:	7c 01       	movw	r14, r24
 a5c:	ac ee       	ldi	r26, 0xEC	; 236
 a5e:	b4 ef       	ldi	r27, 0xF4	; 244
 a60:	a5 01       	movw	r20, r10
 a62:	94 01       	movw	r18, r8
 a64:	56 d0       	rcall	.+172    	; 0xb12 <__mulohisi3>
 a66:	c6 0e       	add	r12, r22
 a68:	d7 1e       	adc	r13, r23
 a6a:	e8 1e       	adc	r14, r24
 a6c:	f9 1e       	adc	r15, r25
 a6e:	f7 fe       	sbrs	r15, 7
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <do_rand+0x6e>
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	c8 1a       	sub	r12, r24
 a76:	d1 08       	sbc	r13, r1
 a78:	e1 08       	sbc	r14, r1
 a7a:	80 e8       	ldi	r24, 0x80	; 128
 a7c:	f8 0a       	sbc	r15, r24
 a7e:	c8 82       	st	Y, r12
 a80:	d9 82       	std	Y+1, r13	; 0x01
 a82:	ea 82       	std	Y+2, r14	; 0x02
 a84:	fb 82       	std	Y+3, r15	; 0x03
 a86:	e8 94       	clt
 a88:	d7 f8       	bld	r13, 7
 a8a:	ee 24       	eor	r14, r14
 a8c:	ff 24       	eor	r15, r15
 a8e:	c6 01       	movw	r24, r12
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	ff 90       	pop	r15
 a96:	ef 90       	pop	r14
 a98:	df 90       	pop	r13
 a9a:	cf 90       	pop	r12
 a9c:	bf 90       	pop	r11
 a9e:	af 90       	pop	r10
 aa0:	9f 90       	pop	r9
 aa2:	8f 90       	pop	r8
 aa4:	08 95       	ret

00000aa6 <rand_r>:
 aa6:	b4 cf       	rjmp	.-152    	; 0xa10 <do_rand>

00000aa8 <rand>:
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	91 e0       	ldi	r25, 0x01	; 1
 aac:	b1 cf       	rjmp	.-158    	; 0xa10 <do_rand>

00000aae <srand>:
 aae:	a0 e0       	ldi	r26, 0x00	; 0
 ab0:	b0 e0       	ldi	r27, 0x00	; 0
 ab2:	80 93 00 01 	sts	0x0100, r24
 ab6:	90 93 01 01 	sts	0x0101, r25
 aba:	a0 93 02 01 	sts	0x0102, r26
 abe:	b0 93 03 01 	sts	0x0103, r27
 ac2:	08 95       	ret

00000ac4 <__divmodsi4>:
 ac4:	05 2e       	mov	r0, r21
 ac6:	97 fb       	bst	r25, 7
 ac8:	16 f4       	brtc	.+4      	; 0xace <__divmodsi4+0xa>
 aca:	00 94       	com	r0
 acc:	06 d0       	rcall	.+12     	; 0xada <__divmodsi4_neg1>
 ace:	57 fd       	sbrc	r21, 7
 ad0:	0c d0       	rcall	.+24     	; 0xaea <__divmodsi4_neg2>
 ad2:	68 df       	rcall	.-304    	; 0x9a4 <__udivmodsi4>
 ad4:	07 fc       	sbrc	r0, 7
 ad6:	09 d0       	rcall	.+18     	; 0xaea <__divmodsi4_neg2>
 ad8:	7e f4       	brtc	.+30     	; 0xaf8 <__divmodsi4_exit>

00000ada <__divmodsi4_neg1>:
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	08 95       	ret

00000aea <__divmodsi4_neg2>:
 aea:	50 95       	com	r21
 aec:	40 95       	com	r20
 aee:	30 95       	com	r19
 af0:	21 95       	neg	r18
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	4f 4f       	sbci	r20, 0xFF	; 255
 af6:	5f 4f       	sbci	r21, 0xFF	; 255

00000af8 <__divmodsi4_exit>:
 af8:	08 95       	ret

00000afa <__muluhisi3>:
 afa:	0f d0       	rcall	.+30     	; 0xb1a <__umulhisi3>
 afc:	a5 9f       	mul	r26, r21
 afe:	90 0d       	add	r25, r0
 b00:	b4 9f       	mul	r27, r20
 b02:	90 0d       	add	r25, r0
 b04:	a4 9f       	mul	r26, r20
 b06:	80 0d       	add	r24, r0
 b08:	91 1d       	adc	r25, r1
 b0a:	11 24       	eor	r1, r1
 b0c:	08 95       	ret

00000b0e <__mulshisi3>:
 b0e:	b7 ff       	sbrs	r27, 7
 b10:	f4 cf       	rjmp	.-24     	; 0xafa <__muluhisi3>

00000b12 <__mulohisi3>:
 b12:	f3 df       	rcall	.-26     	; 0xafa <__muluhisi3>
 b14:	82 1b       	sub	r24, r18
 b16:	93 0b       	sbc	r25, r19
 b18:	08 95       	ret

00000b1a <__umulhisi3>:
 b1a:	a2 9f       	mul	r26, r18
 b1c:	b0 01       	movw	r22, r0
 b1e:	b3 9f       	mul	r27, r19
 b20:	c0 01       	movw	r24, r0
 b22:	a3 9f       	mul	r26, r19
 b24:	01 d0       	rcall	.+2      	; 0xb28 <__umulhisi3+0xe>
 b26:	b2 9f       	mul	r27, r18
 b28:	70 0d       	add	r23, r0
 b2a:	81 1d       	adc	r24, r1
 b2c:	11 24       	eor	r1, r1
 b2e:	91 1d       	adc	r25, r1
 b30:	08 95       	ret

00000b32 <_exit>:
 b32:	f8 94       	cli

00000b34 <__stop_program>:
 b34:	ff cf       	rjmp	.-2      	; 0xb34 <__stop_program>
